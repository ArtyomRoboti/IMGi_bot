import logging

from aiogram import types, Bot

import actions
import config
import getIMG
import keyboards
import text_answer
from IMGi_bot.DB import db_photo, db_user, db_set_img, db_rating, db_technikal

bot = Bot(config.BOT_TOKEN)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start
async def start_bot(messega: types.Message):
    logging.info(f'COMMAND "START" username - {messega.from_user.id}')  # + messega.from_user.username
    await messega.answer(text=text_answer.START_BOT, parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ /register
async def register_bot(message: types.Message):
    await message.answer(text=text_answer.REGISTER_BOT, parse_mode='HTML')
    await actions.RegisterAction.username.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ –±–¥
async def add_db_users(message: types.Message, state):
    await state.update_data(username=message.text)
    username = await state.get_data()  # –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å–≤–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if db_user.check_users(message.from_user.id):
        db_user.create(message.from_user.id, username['username'])
        db_set_img.create_user_id(message.from_user.id)
        db_technikal.create_user(message.from_user.id)
        # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        getIMG.make_dir_user(str(message.from_user.id))

    else:
        # –û—Ç–≤–µ—Ç–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
        logging.warning(f'User {message.from_user.id} is register')
        await message.answer(text=text_answer.IS_ADD_BD, parse_mode='HTML', reply_markup=keyboards.kb_main_menu)
        await state.finish()
        return
    # –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å —É—Å–ø–µ—â–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    logging.info(f'User {message.from_user.id} successfully register')
    await message.answer(text=text_answer.TRUE_REGISTER_USER, parse_mode='HTML', reply_markup=keyboards.kb_main_menu)
    await state.finish()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def st_generate_photo(message: types.Message):
    await message.answer(text=text_answer.GENERATE_BOT, parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
    await actions.GenerateAction.prompt.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–∏–¥–µ (myFile.png)
async def st_get_file_name(message: types.Message, state):
    await state.update_data(prompt=message.text)
    await message.answer(text=text_answer.FILE_NAME_BOT, parse_mode='HTML')
    await actions.GenerateAction.file_name.set()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def generate_photo(message: types.Message, state):
    # {'prompt': '–º–æ—Ç', 'file_name': '–º–æ–π—Ñ–∞–π–ª.png'} - –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(file_name=message.text)
    data = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–∑–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —á—Ç–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!!!
    if getIMG.check_name_file(data['file_name']):  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Ñ–∞–π–ª–∞
        if db_photo.check_photo(data['file_name'],
                                message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–≥–æ–∂–µ —Ñ–∞–π–ª–∞ –±–æ–ª–µ—à—å –Ω–µ—Ç –≤ –ë–î
            await message.answer(text=text_answer.DELAY_GEN_IMAGE)
            await getIMG.generate_image(prompt=data['prompt'],
                                        dir_name=str(message.from_user.id), file_name=data['file_name'])
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(f"generic_photo_user/{str(message.from_user.id)}/{data['file_name']}", mode='rb') as file:
                await bot.send_photo(chat_id=message.from_user.id, photo=file, reply_markup=keyboards.kb_save_img)
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π
                db_technikal.creat_data_tech(id_user=message.from_user.id, prompt=data['prompt'],
                                             name_file=data['file_name'])
        else:
            logging.warning(f"This file is already in the database: {data['file_name']}")
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_file = db_photo.get_all_photo(message.from_user.id)
            message_name_file: str = ''
            for name_image in all_file:
                for name in name_image:
                    message_name_file += f'{str(name)}\n'
            await message.answer(text=text_answer.ERROR_NAME_FILE, parse_mode='HTML')
            # –í—ã–≤–µ—Å—Ç–∏ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(text=f'<b>–í–∞—à–∏ —Ñ–∞–π–ª—ã:</b>üìÅ\n<em>{message_name_file}</em>', parse_mode='HTML')
            # –í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            await actions.GenerateAction.file_name.set()
            return 0
    else:
        logging.warning(f"Invalid file name: {data['file_name']}")
        await message.answer(text=text_answer.ERROR_CORRECT_FILE, parse_mode='HTML')
        # –í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        await actions.GenerateAction.file_name.set()
        return 0
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–∑–≤–∞–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –¥—Ä—É–≥–æ–µ –∏–º—è –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å
    # —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–¥—É–º—ã–≤–∞–ª –¥—Ä—É–≥–æ–µ –∏–º—è –∏ –ø—Ä–∏ —ç—Ç–æ–º –≤—ã–≤–µ—Å—Ç–∏ –µ–º—É –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–¥ –µ–≥–æ user_id
    await state.finish()


# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async def repeat_image(call: types.CallbackQuery):
    logging.info(f'Image re-engineering {call.from_user.id}')
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–∞
    # data_regenerate[0] - prompt data_regenerate[1] - file_name
    data_regenerate = db_technikal.get_tech_data(call.from_user.id)
    await call.message.answer(text=text_answer.DELAY_GEN_IMAGE)
    await getIMG.generate_image(prompt=data_regenerate[0], dir_name=str(call.from_user.id), file_name=data_regenerate[1])
    with open(f"generic_photo_user/{str(call.from_user.id)}/{data_regenerate[1]}", mode='rb') as file:
        await bot.send_photo(chat_id=call.from_user.id, photo=file, reply_markup=keyboards.kb_save_img)
    await call.answer()


# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async def save_gen_image(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–∞
    data_regenerate = db_technikal.get_tech_data(call.from_user.id)
    logging.info(f"The image {data_regenerate[1]} was saved successfully")
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã Photo
    db_photo.save_image(call.from_user.id, data_regenerate[1])
    # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Å –±–æ—Ç–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –µ–≥–æ –∏–º—è –≤ —Ä–µ–π—Ç–∏–Ω–≥
    username = db_user.get_name_for_id(call.from_user.id)
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã Rating
    db_rating.save_image_rating(call.from_user.id, data_regenerate[1], username[0])
    # –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_technikal.delete_data_tech(call.from_user.id)
    # –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–∏—Ö –∏ –Ω–µ —Å–ª–æ–º–∞–ª –±–æ—Ç–∞
    await call.message.delete()
    await call.message.answer(text=text_answer.SUSCESS_SAVE, parse_mode='HTML', reply_markup=keyboards.kb_main_menu)
    await call.answer()


# –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def cancel_image(call: types.CallbackQuery):
    logging.info(f'Canceling photo saving user - {call.from_user.id}')
    data_regenerate = db_technikal.get_tech_data(call.from_user.id)
    # —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    getIMG.delete_img(str(call.from_user.id), data_regenerate[1])
    # –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_technikal.delete_data_tech(call.from_user.id)
    # –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–∏—Ö –∏ –Ω–µ —Å–ª–æ–º–∞–ª –±–æ—Ç–∞
    await call.message.delete()
    await call.message.answer(text=text_answer.CANCEL_IMAGE_BOT, parse_mode='HTML', reply_markup=keyboards.kb_main_menu)
    await call.answer()
